{"code":0,"result":{"list":[{"id":"Tw6tAICu","category":"ALGORITHM","title":"数位相加","description":"给定一个非负整数，将其各位数字不断相加，直到结果仅剩一位数。\n\n样例:\n输入: 38\n输出: 2 \n\n解释:\n运算过程: 3 + 8 \u003d 11, 1 + 1 \u003d 2. \n\n追加:\n不使用任何循环/递归，在 O(1) 运行时内完成运算","difficulty":"EASY","tags":["数学"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int addDigits(int num) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int addDigits(int num) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits \u003d function(num) {\n\n};"}]},{"id":"oXnbRsFq","category":"ALGORITHM","title":"计算器","description":"实现一个基础计算器来计算简单的表达式字符串，表达式字符串仅包含非负整数、+、-、*、/ 运算符和空格。\n注意：/ 应当使用整数除法，舍掉余数。\n\n样例 1:\n输入: \"3+2*2\"\n输出: 7\n\n样例 2:\n输入: \" 3/2 \"\n输出: 1\n\n样例 3:\n输入: \" 3+5 / 2 \"\n输出: 5\n\n备注:\n给定的表达式都是合法的格式，请勿使用 eval 等内置库函数。","difficulty":"MEDIUM","tags":["数组","模拟","栈"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int calculate(string s) {\n\n    }\n};"},{"lang":"JAVA","code":"class Solution {\n    public int calculate(String s) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar calculate \u003d function(s) {\n\n};"}]},{"id":"PUJjlpqO","category":"ALGORITHM","title":"加一","description":"给定一个由十进制数字组成的非空数组，表示一个非负整数，向该整数加 1。\n数字按顺序排列，最高位排在最前，数组中每个元素只有一位。\n可以假定除了 0 本身，该整数不包含前导 0。\n \n样例 1:\n输入: [1,2,3]\n输出: [1,2,4]\n解释: 数列表示整数 123。\n\n样例 2:\n输入: [4,3,2,1]\n输出: [4,3,2,2]\n\n样例 3:\n输入: [0]\n输出: [1]\n \n约束:\n数组长度 \u003c\u003d 100","difficulty":"EASY","tags":["数组","大整数"],"codeSnippets":[{"lang":"JS","code":"/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne \u003d function(digits) {\n\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int[] plusOne(int[] digits) {\n\n    }\n}"},{"lang":"CPP","code":"class Solution {\npublic:\n    vector\u003cint\u003e plusOne(vector\u003cint\u003e\u0026 digits) {\n\n    }\n};"}]},{"id":"c6gpZnIb","category":"ALGORITHM","title":"完全平方数","description":"给定一个正整数（范围：1 ~ 2^31 - 1），判断其是否为完全平方数，不允许使用内置的数学函数如 sqrt。\n \n样例 1:\n输入: 16\n输出: true\n\n样例 2:\n输入: 14\n输出: false","difficulty":"EASY","tags":["数学"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int numSquares(int n) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int numSquares(int n) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares \u003d function(n) {\n\n};"}]},{"id":"HkYzaBQE","category":"ALGORITHM","title":"爬楼梯","description":"你正在爬楼梯，需要 n 步（1 \u003c\u003d n \u003c\u003d 45）才能爬到顶部。\n每次可以爬 1 或 2 步。有多少种不同的方法可以爬到顶部？\n\n样例 1:\n输入: 2\n输出: 2\n解释:\n两种方法\n1. 1 步 + 1 步\n2. 2 步\n\n样例 2:\n输入: 3\n输出: 3\n解释:\n三种方法\n1. 1 步 + 1 步 + 1 步\n2. 1 步 + 2 步\n3. 2 步 + 1 步","difficulty":"MEDIUM","tags":["数学"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int climbStairs(int n) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int climbStairs(int n) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs \u003d function(n) {\n\n};"}]},{"id":"2peWcq9C","category":"ALGORITHM","title":"罗马数字","description":"给定一个整数（范围：1 ~ 3999），将其转换为罗马数字。罗马数字由 7 个不同的符号表示——I, V, X, L, C, D 和 M：\nI 代表 1\nV 代表 5\nX 代表 10\nL 代表 50\nC 代表 100\nD 代表 500\nM 代表 1000\n\n罗马数字通常由最大到最小从左到右书写。例如，2 在罗马数字中写作 II，即将两个一相加。12 写作 XII，即 X + II。27 写作 XXVII，即 XX + V + II。\n\n但是，4 不是写作 IIII，而是写作 IV。因为将 5 前面的 1 减掉就得到 4。同样的原则适用于数字 9，即 IX。有 6 种情况会用到减法：\n可以将 I 放到 V (5) 和 X (10) 之前来表示 4 和 9。 \n可以将 X 放到 L (50) 和 C (100) 之前来表示 40 和 90。\n可以将 C 放到 D (500) 和 M (1000) 之前来表示 400 和 900。\n\n样例 1:\n输入: 3\n输出: \"III\"\n\n样例 2:\n输入: 4\n输出: \"IV\"\n\n样例 3:\n输入: 9\n输出: \"IX\"\n\n样例 4:\n输入: num \u003d 58\n输出: \"LVIII\"\n解释: L \u003d 50, V \u003d 5, III \u003d 3.\n\n样例 5:\n输入: num \u003d 1994\n输出: \"MCMXCIV\"\n解释: M \u003d 1000, CM \u003d 900, XC \u003d 90, IV \u003d 4.","difficulty":"MEDIUM","tags":["数学","模拟"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    string intToRoman(int num) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public String intToRoman(int num) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman \u003d function(num) {\n\n};"}]},{"id":"SQN3yfJI","category":"ALGORITHM","title":"股票套利","description":"假设你能预知今后 n 天的股票价格，设计一个算法来确定最大利润。\n可以完成任意多次交易（即购买和卖出一份股票任意多次），但必须先卖出才能再次买入，且卖出股票后第二天才能买入。\n\n样例:\n输入: [1,2,3,0,2]\n输出: 3 \n解释:\n第1天买\n第2天卖\n第3天（由于条件限制）休息\n第4天买\n第5天卖","difficulty":"MEDIUM","tags":["动态规划"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int maxProfit(vector\u003cint\u003e\u0026 prices) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int maxProfit(int[] prices) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit \u003d function(prices) {\n\n};"}]},{"id":"pVyJjVxO","category":"ALGORITHM","title":"数字格式","description":"验证给定字符串是否为正确的浮点数格式，不要使用内置的库函数。\n\n样例:\n\"0\" \u003d\u003e true\n\" 0.1 \" \u003d\u003e true\n\"abc\" \u003d\u003e false\n\"1 a\" \u003d\u003e false\n\"2e10\" \u003d\u003e true\n\" -90e3   \" \u003d\u003e true\n\" 1e\" \u003d\u003e false\n\"e3\" \u003d\u003e false\n\" 6e-1\" \u003d\u003e true\n\" 99e2.5 \" \u003d\u003e false\n\"53.5e93\" \u003d\u003e true\n\" --6 \" \u003d\u003e false\n\"-+3\" \u003d\u003e false\n\"95a54e53\" \u003d\u003e false\n\n备注:\n下列字符可能出现在有效的小数中：数字 0-9、指数 e、符号 +-、小数点 .","difficulty":"HARD","tags":["模拟","字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nbool numberFormat(string s) {\n  return false;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static boolean numberFormat(String s) {\n        return false;\n    }\n}"},{"lang":"JS","code":"exports.numberFormat \u003d (s) \u003d\u003e {\n  return false;\n}"}]},{"id":"je97XB5P","category":"ALGORITHM","title":"质数计算","description":"计算小于 n（0 \u003c\u003d n \u003c\u003d 5000000）的质数个数。\n \n样例 1:\n输入: 10\n输出: 4\n\n样例 2:\n输入: 0\n输出: 0\n\n样例 3:\n输入: 1\n输出: 0","difficulty":"EASY","tags":["数学"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int countPrimes(int n) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int countPrimes(int n) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes \u003d function(n) {\n\n};"}]},{"id":"R2im72GZ","category":"ALGORITHM","title":"Excel 表格","description":"给定一个正整数 n，返回在 Excel 表格中第 n 列的字母名。\n例如：\n    1 -\u003e A\n    2 -\u003e B\n    3 -\u003e C\n    ...\n    26 -\u003e Z\n    27 -\u003e AA\n    28 -\u003e AB\n\n样例1:\n输入: 1\n输出: \"A\"\n\n样例2:\n输入: 28\n输出: \"AB\"\n\n样例3:\n输入: 701\n输出: \"ZY\"","difficulty":"EASY","tags":["数学","字符串","模拟"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    string convertToTitle(int columnNumber) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public String convertToTitle(int columnNumber) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {number} columnNumber\n * @return {string}\n */\nvar convertToTitle \u003d function(columnNumber) {\n\n};"}]},{"id":"aHTo54ie","category":"ALGORITHM","title":"字符串形式","description":"给定两个字符串 s 和 t（保证长度相同），如果可以替换字符串 s 中的字母来得到 t，则这两个字符串形式相同。\n必须将某个字符的所有匹配项替换位另一个字符，同时保持字符的顺序。两个字符不能对应于同一个字符，但字符可以对应于其自身。\n\n样例 1:\n输入: s \u003d \"egg\", t \u003d \"add\"\n输出: true\n\n样例 2:\n输入: s \u003d \"foo\", t \u003d \"bar\"\n输出: false\n\n样例 3:\n输入: s \u003d \"paper\", t \u003d \"title\"\n输出: true","difficulty":"EASY","tags":["字符串","数组"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nbool stringForms(string s, string t) {\n  return false;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static boolean stringForms(String s, String t) {\n        return false;\n    }\n}"},{"lang":"JS","code":"exports.stringForms \u003d (s, t) \u003d\u003e {\n  return false;\n}"}]},{"id":"DgIlPRTM","category":"ALGORITHM","title":"括号序列","description":"给定一个括号序列（仅包含字符 \u0027(\u0027 和 \u0027)\u0027 的字符串，长度不超过 30000），找到其最长的合法子序列\n \n样例1:\n输入: \"(()\"\n输出: 2\n解释: \"()\"\n\n样例2:\n输入: \")()())\"\n输出: 4\n解释: \"()()\"\n\n样例3:\n输入: \"\"\n输出: 0","difficulty":"MEDIUM","tags":["栈","字符串"],"codeSnippets":[{"lang":"CPP","code":"class Solution {\npublic:\n    int longestValidParentheses(string s) {\n\n    }\n};"},{"lang":"JAVA8","code":"class Solution {\n    public int longestValidParentheses(String s) {\n\n    }\n}"},{"lang":"JS","code":"/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses \u003d function(s) {\n\n};"}]},{"id":"Eof9sJHI","category":"ALGORITHM","title":"字符串构造","description":"给定一个字符串和另一个基因串（都只包含小写字母），判断该字符串能否利用基因串制造——基因串中的每个字母只能使用一次。\n \n样例 1:\n输入: s \u003d \"a\", gene \u003d \"b\"\n输出: false\n\n样例 2:\n输入: s \u003d \"aa\", gene \u003d \"ab\"\n输出: false\n\n样例 3:\n输入: s \u003d \"aa\", gene \u003d \"aba\"\n输出: true","difficulty":"EASY","tags":["字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nbool stringGenes(string s, string gene) {\n  return false;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static boolean stringGenes(String s, String gene) {\n        return false;\n    }\n}"},{"lang":"JS","code":"exports.stringGenes \u003d (s, gene) \u003d\u003e {\n  return false;\n}"}]},{"id":"g7Inhr2B","category":"ALGORITHM","title":"青蛙过河","description":"一只青蛙需要踩着石头过河，判断其能否从第一颗石头跳至最后一颗（最多不超过 30000 颗石头）。给定一个非负整数数组，第 i 个元素代表青蛙处于第 i 颗石头时，最多能向后跳多远（0 \u003c\u003d 跳远距离 \u003c\u003d 100000）。\n \n样例 1:\n输入: [2,3,1,1,4]\n输出: true\n解释: 首先只跳 1 步，然后跳 3 步。\n\n样例 2:\n输入: [3,2,1,0,4]\n输出: false\n解释: 青蛙无论如何都会到达第 4 颗石头，而在上面已经没法往后跳了（输入中出现了 0），因此无法到达最后的石头。","difficulty":"EASY","tags":["数学","贪心"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nbool frogJump(const vector\u003cint\u003e \u0026skips) {\n  return false;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static boolean frogJump(int[] skips) {\n        return false;\n    }\n}"},{"lang":"JS","code":"exports.frogJump \u003d (skips) \u003d\u003e {\n  return false;\n}"}]},{"id":"7R0WORMV","category":"ALGORITHM","title":"扭蛋抽奖","description":"暑假，小明和妈妈一起乘飞机去广州，航空公司举办了扭蛋抽奖活动。已知，航司提供了 k 种不同类型的扭蛋，它们所需的硬币数各不相同，每种扭蛋的个数都有无限多个。如果小明想把他所有 m 个硬币恰好用完，他有多少种兑换方式（不同的兑换顺序算作不同的兑换方式）？\n\n样例:\n输入:\n扭蛋对应的硬币数 \u003d [1, 2, 3]\n小明的硬币数 m \u003d 4\n输出: 7\n\n如下 7 种兑换方式：\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n注意到兑换的顺序不同会被算作不同的兑换方式。","difficulty":"MEDIUM","tags":["动态规划"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint lottery(const vector\u003cint\u003e \u0026a, int m) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int lottery(int[] a, int m) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.lottery \u003d (a, m) \u003d\u003e {\n  return 0;\n}"}]},{"id":"TTpgH5MM","category":"ALGORITHM","title":"反转数字","description":"给定一个不超过 8 位的十进制自然数，反转其各位数字，注意只允许使用 O(1) 空间。\n \n样例 1:\n输入: 123\n输出: 321\n\n样例 2:\n输入: 120\n输出: 21\n\n样例 3:\n输入: 0\n输出: 0","difficulty":"EASY","tags":["数学","模拟"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint turnNumber(int n) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int turnNumber(int n) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.turnNumber \u003d (n) \u003d\u003e {\n  return 0;\n}"}]},{"id":"CB8woQoE","category":"ALGORITHM","title":"等差子数列","description":"如果一个数列由至少 3 个元素组成，且其中任意两个连续数字的差都相等，则该数列称为等差数列。例如，以下这些都是等差数列：\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\n而 1, 1, 2, 5, 7 则不是等差数列。\n\n给定了一个包含 n 个数字的数组 a，计算 a 中的等差子数列的数量。等差子数列是指 a 中的一个子序列 a[l ... r] 是等差数列。\n\n样例:\n输入: [1, 2, 3, 4]\n输出: 3\n\n3 个等差子数列:\n1, 2, 3\n2, 3, 4\n1, 2, 3, 4","difficulty":"MEDIUM","tags":["数学","数组"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint subsequenceCount(const vector\u003cint\u003e \u0026a) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int subsequenceCount(int[] a) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.subsequenceCount \u003d (a) \u003d\u003e {\n  return 0;\n}"}]},{"id":"wEKCfM0q","category":"ALGORITHM","title":"最大获利","description":"从一个长度不超过 100 的数字序列中选出若干个数字（每个数字不超过 400），使得其总和最大，有一个限制是不能选择相邻的数字。\n\n样例1:\n输入: [1,2,3,1]\n输出: 4\n解释: 选择第 1 个和第 3 个——1 + 3 \u003d 4\n\n样例2:\n输入: [2,7,9,3,1]\n输出: 12\n解释: 选择第 1、3、5 个——2 + 9 + 1 \u003d 12","difficulty":"EASY","tags":["数组","动态规划"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint maxProfit(const vector\u003cint\u003e \u0026a) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int maxProfit(int[] a) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.maxProfit \u003d (a) \u003d\u003e {\n  return 0;\n}"}]},{"id":"ZVkH5mAP","category":"ALGORITHM","title":"反转元音","description":"写一个函数，使其接受字符串作为输入，并仅颠倒该字符串中的元音字母 aeiou。\n\n样例:\n输入: \"hello\"\n输出: \"holle\"","difficulty":"MEDIUM","tags":["数组","字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nstring vowel(string s) {\n  return s;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static String vowel(String s) {\n        return s;\n    }\n}"},{"lang":"JS","code":"exports.vowel \u003d (s) \u003d\u003e {\n  return s;\n}"}]},{"id":"4BrrI6ac","category":"ALGORITHM","title":"计算平方根","description":"计算非负整数 x 的平方根，去掉小数部分，仅返回结果的整数部分。\n不允许使用内置函数如 sqrt。\n\n样例 1:\n输入: 4\n输出: 2\n\n样例 2:\n输入: 8\n输出: 2","difficulty":"EASY","tags":["数学"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint sqrt(int x) {\n  return x;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int sqrt(int x) {\n        return x;\n    }\n}"},{"lang":"JS","code":"exports.sqrt \u003d (x) \u003d\u003e {\n  return x;\n}"}]},{"id":"cUlzYYAp","category":"ALGORITHM","title":"最长公共前缀","description":"查找一组不超过 200 个仅由小写英文字母组成的字符串的最长公共前缀，每个字符串的长度也不超过 200。\n\n样例 1:\n输入: [\"flower\",\"flow\",\"flight\"]\n输出: \"fl\"\n\n样例 2:\n输入: [\"dog\",\"cat\",\"car\"]\n输出: \"\"\n解释: 没有公共前缀则返回空串","difficulty":"EASY","tags":["字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nstring prefix(const vector\u003cstring\u003e \u0026s) {\n  return \"\";\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static String prefix(String[] s) {\n        return \"\";\n    }\n}"},{"lang":"JS","code":"exports.prefix \u003d (s) \u003d\u003e {\n  return \"\";\n}"}]},{"id":"Mzz5vnh5","category":"ALGORITHM","title":"最后的轻语","description":"给定一个仅由大小写字母和空格组成的字符串，返回其最后一个单词的长度，如果最后一个单词不存在，则返回 0。\n\n样例:\n输入: \"last Whisper     \"\n输出: 7","difficulty":"EASY","tags":["字符串","数组"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint lastWhisper(string s) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int lastWhisper(String s) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.lastWhisper \u003d (s) \u003d\u003e {\n  return 0;\n}"}]},{"id":"6VNG7YYZ","category":"ALGORITHM","title":"查找最小值","description":"假设一个升序排列的数组（但可能包含重复值）在某个位置进行了旋转（类似于 0,1,2,4,5,6,7 旋转为 4,5,6,7,0,1,2），查找其中的最小元素。\n\n样例 1:\n输入: [1,3,5]\n输出: 1\n\n样例 2:\n输入: [2,2,2,0,1]\n输出: 0\n备注: 由 0, 1, 2, 2, 2 旋转而成","difficulty":"MEDIUM","tags":["二分查找"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint minRotated(const vector\u003cint\u003e \u0026a) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int minRotated(int[] a) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.minRotated \u003d (a) \u003d\u003e {\n  return 0;\n}"}]},{"id":"hXuw8TNa","category":"ALGORITHM","title":"独特的字母","description":"给定一个仅包含小写字母的字符串，查找其中第一个仅出现过一次的字符并返回其位置，不存在则返回 -1。\n\n样例:\n\"geeklamp\" \u003d\u003e 0\n\"geekgeeklamp\" \u003d\u003e 8\n\"geekgeeklamplamp\" \u003d\u003e -1","difficulty":"EASY","tags":["字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint findFirstUnique(string s) {\n  return -1;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int findFirstUnique(String s) {\n        return -1;\n    }\n}"},{"lang":"JS","code":"exports.findFirstUnique \u003d (s) \u003d\u003e {\n  return -1;\n}"}]},{"id":"8S4GVUSf","category":"ALGORITHM","title":"判定变换","description":"给定两个仅包含小写字母的字符串 s 和 t，判断 t 能否由 s 变换（若干次调整 s 中字母的位置）而来。\n\n样例 1:\n输入: s \u003d \"geek\", t \u003d \"keeg\"\n输出: true\n\n样例 2:\n输入: s \u003d \"lamp\", t \u003d \"plan\"\n输出: false","difficulty":"EASY","tags":["字符串","数组"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nbool checkTransformation(string s, string t) {\n  return true;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static boolean checkTransformation(String s, String t) {\n        return true;\n    }\n}"},{"lang":"JS","code":"exports.checkTransformation \u003d (s, t) \u003d\u003e {\n  return true;\n}"}]},{"id":"vG7LfnQ6","category":"ALGORITHM","title":"回文审核","description":"实现一个审核系统，判断一个给定的字符串是不是回文（只考虑字母、数字，忽略大小写）。\n\n样例 1:\n输入: \"A man, a plan, a canal: Panama\"\n输出: true\n\n样例 2:\n输入: \"geek lamp plan keeg\"\n输出: false","difficulty":"MEDIUM","tags":["字符串","数组"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nbool examineSystem(string s) {\n  return true;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static boolean examineSystem(String s) {\n        return true;\n    }\n}"},{"lang":"JS","code":"exports.examineSystem \u003d (s) \u003d\u003e {\n  return true;\n}"}]},{"id":"30xQzmpb","category":"ALGORITHM","title":"反向加密","description":"敌军使用以下加密方式，将包含大写字母 A-Z 的消息编码为数字：\n\u0027A\u0027 -\u003e 1\n\u0027B\u0027 -\u003e 2\n...\n\u0027Z\u0027 -\u003e 26\n我军捕获了敌军的一个密码（每一位都是数字，长度不超过 100），反向判断其解密后的原文可能有多少种。\n\n输入: \"12\"\n输出: 2\n解释: 可以将其解码为 \"AB\" (1, 2) 或 \"L\" (12)\n\n样例 2:\n输入: \"226\"\n输出: 3\n解释: \"BZ\" (2, 26)、\"VF\" (22, 6)、\"BBF\" (2, 2, 6)\n\n样例 3:\n输入: \"0\"\n输出: 0\n\n样例 4:\n输入: \"1\"\n输出: 1","difficulty":"MEDIUM","tags":["动态规划","字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint revertPasswords(string s) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int revertPasswords(String s) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.revertPasswords \u003d (s) \u003d\u003e {\n  return 0;\n}"}]},{"id":"BcH4JAag","category":"ALGORITHM","title":"罗马数字 II","description":"罗马数字由 7 个不同的符号表示——I, V, X, L, C, D 和 M：\nI 代表 1\nV 代表 5\nX 代表 10\nL 代表 50\nC 代表 100\nD 代表 500\nM 代表 1000\n\n罗马数字通常由最大到最小从左到右书写。例如，2 在罗马数字中写作 II，即将两个一相加。12 写作 XII，即 X + II。27 写作 XXVII，即 XX + V + II。\n\n但是，4 不是写作 IIII，而是写作 IV。因为将 5 前面的 1 减掉就得到 4。同样的原则适用于数字 9，即 IX。有 6 种情况会用到减法：\n可以将 I 放到 V (5) 和 X (10) 之前来表示 4 和 9。 \n可以将 X 放到 L (50) 和 C (100) 之前来表示 40 和 90。\n可以将 C 放到 D (500) 和 M (1000) 之前来表示 400 和 900。\n\n给定一个罗马数字（仅包含字符 IVXLCDM），将其转换为整数（保证转换后范围在 1 ~ 3999）。\n \n样例 1:\n输入: \"III\"\n输出: 3\n\n样例 2:\n输入: \"IV\"\n输出: 4\n\n样例 3:\n输入: \"IX\"\n输出: 9\n\n样例 4:\n输入: \"LVIII\"\n输出: 58\n\n样例 5:\n输入: \"MCMXCIV\"\n输出: 1994\n解释: M \u003d 1000, CM \u003d 900, XC \u003d 90, IV \u003d 4","difficulty":"MEDIUM","tags":["数学","模拟","字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint roman(string s) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int roman(String s) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.roman \u003d (s) \u003d\u003e {\n  return 0;\n}"}]},{"id":"luyojBqR","category":"ALGORITHM","title":"Excel 表格 II","description":"给定 Excel 表格中第 n 列的字母名（介于 A 和 FXSHRXW 之间），反推出 n。\n例如:\n    A -\u003e 1\n    B -\u003e 2\n    C -\u003e 3\n    ...\n    Z -\u003e 26\n    AA -\u003e 27\n    AB -\u003e 28 \n\n样例 1:\n输入: \"A\"\n输出: 1\n\n样例 2:\n输入: \"AB\"\n输出: 28\n\n样例 3:\n输入: \"ZY\"\n输出: 701","difficulty":"EASY","tags":["数学","字符串","模拟"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint excel(string s) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int excel(String s) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.excel \u003d (s) \u003d\u003e {\n  return 0;\n}"}]},{"id":"n4362fJv","category":"ALGORITHM","title":"两数之和","description":"给定一个已按升序排列的整数数组（长度不超过30000，每项数字绝对值不超过 1000），找到两个数字使其之和等于 n（-1000 \u003c\u003d n \u003c\u003d 1000），并按升序返回其下标（从 1 开始）。同一个元素不能使用两次，保证只有一个解。\n\n样例 1:\n输入: [2,7,11,15], n \u003d 9\n输出: [1,2]\n解释: 2 和 7 的和为 9， 因此选择第 1 项和第 2 项。\n\n样例 2:\n输入: [2,3,4], n \u003d 6\n输出: [1,3]\n\n样例 3:\n输入: [-1,0], n \u003d -1\n输出: [1,2]","difficulty":"MEDIUM","tags":["贪心","数组","双指针"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nvector\u003cint\u003e findTwoNumbers(const vector\u003cint\u003e \u0026a, int n) {\n  return a;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int[] findTwoNumbers(int[] a, int n) {\n        return a;\n    }\n}"},{"lang":"JS","code":"exports.findTwoNumbers \u003d (a, n) \u003d\u003e {\n  return [1, 2];\n}"}]},{"id":"rGM4t9fB","category":"ALGORITHM","title":"数据库操作","description":"数据库是一个长度不超过 10000 的有序数组（数字不重复且绝对值不超过 10000），现给定一目标值 n（-10000 \u003c\u003d n \u003c\u003d 10000），如果找到目标值则返回数组下标。否则返回按顺序插入时，应插到的位置下标（从 0 开始）。\n \n样例 1:\n输入: [1,3,5,6], n \u003d 5\n输出: 2\n\n样例 2:\n输入: [1,3,5,6], n \u003d 2\n输出: 1\n\n样例 3:\n输入: [1,3,5,6], n \u003d 7\n输出: 4\n\n样例 4:\n输入: [1,3,5,6], n \u003d 0\n输出: 0\n\n样例 5:\n输入: [1], n \u003d 0\n输出: 0","difficulty":"EASY","tags":["数组","二分查找"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint callDatabase(const vector\u003cint\u003e \u0026a, int n) {\n  return 0;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int callDatabase(int[] a, int n) {\n        return 0;\n    }\n}"},{"lang":"JS","code":"exports.callDatabase \u003d (a, n) \u003d\u003e {\n  return 0;\n}"}]},{"id":"EUfnzK6H","category":"ALGORITHM","title":"字符串查找","description":"给定两个长度不超过 50000 的小写字母串 s 和 t，查找 t 在 s 中第一次出现的位置，找不到则返回 -1。\n \n样例 1:\n输入: s \u003d \"hello\", t \u003d \"ll\"\n输出: 2\n\n样例 2:\n输入: s \u003d \"aaaaa\", t \u003d \"bba\"\n输出: -1\n\n样例 3:\n输入: s \u003d \"\", t \u003d \"\"\n输出: 0","difficulty":"EASY","tags":["字符串"],"codeSnippets":[{"lang":"CPP","code":"#include \u003cstring\u003e\n#include \u003cvector\u003e\nusing namespace std;\nint indexOf(string s, string t) {\n  return -1;\n}"},{"lang":"JAVA8","code":"import java.util.*;\nimport java.io.*;\nclass Solution {\n    public static int indexOf(String s, String t) {\n        return -1;\n    }\n}"},{"lang":"JS","code":"exports.indexOf \u003d (s, t) \u003d\u003e {\n  return -1;\n}"}]}]}}
